!function(e){e.extend(!0,{ddYMap:{defaults:{placemarks:new Array,element:"map",defaultZoom:15,defaultType:"map",scrollZoom:!1,mapCenterOffset:!1,placemarkOptions:{},controls:[{name:"zoomControl"},{name:"typeSelector"},{name:"fullscreenControl"},{name:"geolocationControl"},{name:"rulerControl"}],mapOptions:{suppressMapOpenBlock:!0}},verifyRenamedParams:function(e,a){var n={},r=new Array;if(Object.entries(a).forEach((([a,t])=>{void 0!==e[t]&&void 0===e[a]&&(n[a]=e[t],r.push("“"+t+"” must be renamed as “"+a+"”;"))})),r.length>0){console.group("$.ddYMap"),console.warn("Some of the parameters have been renamed. Please, correct the following parameters:");for(var t=0;t<r.length;t++)console.warn(r[t]);console.groupEnd()}return n},preparePlacemarks:function(a){var n=new ymaps.GeoObjectCollection;if(!Array.isArray(a.placemarks))return n;if(2==a.placemarks.length&&e.isNumeric(a.placemarks[0])&&e.isNumeric(a.placemarks[1]))n.add(new ymaps.Placemark(a.placemarks,{},a.placemarkOptions));else for(var r=0;r<a.placemarks.length;r++)e.isPlainObject(a.placemarks[r])&&Array.isArray(a.placemarks[r].latLng)&&2==a.placemarks[r].latLng.length&&n.add(new ymaps.Placemark(a.placemarks[r].latLng,{balloonContent:"string"==typeof a.placemarks[r].content?e.trim(a.placemarks[r].content):""},a.placemarkOptions));return n},init:function(a){var n=this;e.extend(a,n.verifyRenamedParams(a,{defaultZoom:"zoom",placemarks:"latLng"})),a=e.extend({},n.defaults,a),ymaps.ready((function(){var r=n.preparePlacemarks(a),t=r.getLength();if(t>0){a.$element=e(a.element),0==a.$element.height()&&a.$element.height(400);var o=new ymaps.Map(a.element,{center:r.get(0).geometry.getCoordinates(),zoom:a.defaultZoom,type:"yandex#"+a.defaultType,controls:[]},a.mapOptions);if(Array.isArray(a.controls)&&a.controls.forEach((e=>{e.name&&o.controls.add(e.name,e.options)})),a.scrollZoom||o.behaviors.disable("scrollZoom"),o.geoObjects.add(r),t>1&&(a.$element.is(":hidden")?o.events.once("sizechange",(function(){o.setBounds(r.getBounds())})):o.setBounds(r.getBounds())),Array.isArray(a.mapCenterOffset)&&2==a.mapCenterOffset.length){var l=o.getGlobalPixelCenter();o.setGlobalPixelCenter([l[0]-a.mapCenterOffset[0],l[1]-a.mapCenterOffset[1]])}a.$element.data("ddYMap",{map:o}).trigger("ddAfterInit")}}))}}}),e.fn.ddYMap=function(a){var n=e.ddYMap;return e(this).each((function(){n.init(e.extend(a,{element:this}))}))}}(jQuery);